#!/usr/bin/env bash

set -euo pipefail

function red() {
    text="${1:- }"
    echo -e "\033[1;31m$text\033[0m"
}

function green() {
    text="${1:- }"
    echo -e "\033[1;32m$text\033[0m"
}

function yellow() {
    text="${1:- }"
    echo -e "\033[1;33m$text\033[0m"
}

function blue() {
    text="${1:- }"
    echo -e "\033[1;36m$text\033[0m"
}
# optional argument handling
if [[ "$1" == "version" ]]; then
    green "1.0.0"
    exit 0
elif [[ "$1" == "-h" || "$1" == "--help" || "$1" == "-help" ]]; then
    blue "Usage: kubectl clean <namespace> or kubectl clean all"
    exit 0
elif [[ "$1" == -* || "$1" == --* ]]; then
    yellow "Unknown argument"
    exit 0
fi

# optional argument handling
if [[ "$1" == "all" ]]; then
    NAMESPACES=($(kubectl get ns --no-headers -oname))
    for NAMESPACE in "${NAMESPACES[@]}"; do 
        green "Cleaning up namespace => ${NAMESPACE##*/}"
        kubectl get pods -n "${NAMESPACE##*/}" --no-headers|grep -vi "Running\|Pending\|ContainerCreating"|awk '{print $1}'|xargs -I {} kubectl delete pods -n "${NAMESPACE##*/}" {} || true
    done
    exit 0
else 
    NAMESPACES=($(kubectl get ns --no-headers -oname))
    if [[ " ${NAMESPACES[*]} " =~ " namespace/${1} " ]]; then
        green "Cleaning up namespace => ${1}"
        kubectl get pods -n "${1}" --no-headers|grep -vi "Running\|Pending\|ContainerCreating"|awk '{print $1}'|xargs -I {} kubectl delete pods -n "${1}" {} || true
    else 
        yellow "Namespace => ${1} not found in cluster"
    fi
    exit 0
fi